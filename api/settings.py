#api/settings.py

"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import environ
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
#BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Initialize.django-environ

# Read DEBUG from environment variable, default to 'False'. Compare with 'True'.
env = environ.Env(
    # Define type conversion and default values
    DEBUG=(bool, False)
)

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-u@953l%dz0)6=$ahgl#+kuv_&97&%n(rsze_f^g-5s9gfbn%nj'
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True
#DEBUG = os.environ.get('DEBUG', 'False') == 'True'
DEBUG = env('DEBUG')

#ALLOWED_HOSTS = []
# Read ALLOWED_HOSTS from environment variable, split comma-separated string into a list
#allowed_hosts_str = os.environ.get('ALLOWED_HOSTS', '')
#ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',') if host.strip()]
# Add default hosts if needed when the env var is empty (e.g., for local non-docker)
#if not ALLOWED_HOSTS and DEBUG:
#     ALLOWED_HOSTS = ['localhost', '127.0.0.1', '3.16.136.175']
#ALLOWED_HOSTS = ['localhost', '127.0.0.1', '3.16.136.175']
#ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['127.0.0.1', 'localhost', '3.138.122.89'])



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'process',
    'drf_spectacular',
    #'debug_toolbar',
    #'django_celery_beat',
    #'django_celery_results',
]


REST_FRAMEWORK = {
    #'DEFAULT_PERMISSION_CLASSES': [
    #    'rest_framework.permissions.AllowAny',
    #],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema', # Add schema generator
}


# SPECTACULAR SETTINGS
SPECTACULAR_SETTINGS = {
    'TITLE': 'Django Celery API', # Your API title
    'DESCRIPTION': 'API endpoints for processing data asynchronously via Celery and Redis.', # Your API description
    'VERSION': '1.0.0', # Your API version
    'SERVE_INCLUDE_SCHEMA': False, # Serve the schema separately
    # By default, drf-spectacular uses UUID format for UUID fields in serializers.
    # No extra configuration needed for task_id if it's a UUIDField.
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'debug_toolbar.middleware.DebugToolbarMiddleware',
]

# Configure the toolbar
"""
DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.cache.CachePanel',
    # other panels
]
"""


ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

DATABASES = {
    'default': env.db('DATABASE_URL')
    #, default='sqlite:///mydatabase.sqlite3')
}   
  

#DATABASES = {
#    'default': {
        #'HOST': "db",
        #'ENGINE': "sqlite:///mydatabase.sqlite3"

        # For docker, run docker-compose up --build twice to link HOST name to yml file.
        # flag: restart: on-failure in the db service section will handle it.
        #'HOST': "db",
        #'ENGINE': "django.db.backends.postgresql", # Normal
        #'ENGINE': 'django.db.backends.postgresql_psycopg2', # For docker
        #'ENGINE': 'django_postgres_extensions.backends.postgresql',
        #'NAME': "api",
        #'USER': "postgres",
        #'HOST': "127.0.0.1",
        #'PORT': "5432",
        #'PASSWORD':"postgres"
#    }
#}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Required for collecting static files in production

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Celery Configuration Options
# Configure Celery task queues to use Redis as broker and backend
#CELERY_BROKER_URL = 'redis://localhost:6379/0'
#CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

# Celery Configuration Options for docker
# Use the service name 'redis' defined in docker-compose.yml
CELERY_BROKER_URL = env('REDIS_URL') #'redis://redis:6379/0'
CELERY_RESULT_BACKEND = env('REDIS_URL') #'redis://redis:6379/0' # Store task results in Redis

# Alternatively, you can use django-db for the result backend:
# To store results in the Django database (using django-celery-results)
#CELERY_RESULT_BACKEND = 'django-db'

# Task settings
#CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Lagos' # Or your project's timezone
CELERY_TASK_TRACK_STARTED = True # Optional: Track when tasks start
#CELERY_RESULT_EXTENDED = True # Optional: Store more metadata if needed
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# Optional: If you are using django-celery-beat
#CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'



# Caches Configuration Options
#CACHES = {
#    'default': {
        # Normal
        #'BACKEND': 'django_redis.cache.RedisCache',
        #'LOCATION': 'redis://127.0.0.1:6379/1',

        # For Docker
#        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
#        'LOCATION': 'redis://redis:6379',

#        'OPTIONS': {
#            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#            'CONNECTION_POOL_KWARGS': {
#                'max_connections': 100,
#                'retry_on_timeout': True,
#            }
#        }
        #For high availability
        #'LOCATION': [
        #    'redis://127.0.0.1:26379/0',
        #    'redis://127.0.0.1:26380/0',
        #    'redis://127.0.0.1:26381/0',
        #],
        #'OPTIONS': {
        #    'CLIENT_CLASS': 'django_redis.client.SentinelClient',
        #    'SENTINEL_KWARGS': {
        #        'socket_timeout': 0.1,
        #    }
        #}
#    }
#}

# Optional: This is to ensure Django sessions are stored in Redis
#SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
#SESSION_CACHE_ALIAS = 'default'



# Logging Configuration (Optional but recommended)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Adjust level as needed (DEBUG, INFO, WARNING, ERROR)
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'celery': {
             'handlers': ['console'],
             'level': 'INFO',
             'propagate': False,
        },
        'api': { # Your app's logger
             'handlers': ['console'],
             'level': 'INFO',
             'propagate': False,
        }
    },
}

